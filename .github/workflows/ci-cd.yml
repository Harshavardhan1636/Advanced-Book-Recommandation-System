name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend: Code Quality & Linting
  backend-lint:
    name: Backend Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy pylint flake8
          pip install -r requirements.txt

      - name: Run Black (formatting check)
        run: black --check .
        continue-on-error: true

      - name: Run Ruff (linting)
        run: ruff check .
        continue-on-error: true

      - name: Run Flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

      - name: Run mypy (type checking)
        run: mypy api.py --ignore-missing-imports
        continue-on-error: true

  # Frontend: Build & Type Check
  frontend-build:
    name: Frontend Build & Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run type check
        run: cd frontend && npm run type-check

      - name: Run ESLint
        run: cd frontend && npm run lint

      - name: Build production bundle
        run: cd frontend && npm run build

  # Backend: Unit Tests
  backend-test:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: backend-lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          pip install -r requirements.txt

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key
        run: pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --tb=short

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: backend-coverage
        continue-on-error: true

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: backend-lint

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: bandit -r . -f csv -o bandit-report.csv
        continue-on-error: true

      - name: Run Safety check
        run: safety check --json
        continue-on-error: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit (frontend)
        run: cd frontend && npm audit --audit-level=moderate
        continue-on-error: true

  # Build & Integration
  build:
    name: Build & Integration
    runs-on: ubuntu-latest
    needs: [backend-lint, frontend-build, backend-test, security]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: bookhub-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy notification
        run: |
          echo "✅ Deployment triggered on main branch"
          echo "CI/CD Pipeline Status: PASSED"
          echo "Ready for deployment"

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [backend-lint, frontend-build, backend-test, security, build]
    if: always()

    steps:
      - name: Check workflow status
        run: |
          if [ "${{ needs.backend-lint.result }}" != "success" ] || \
             [ "${{ needs.frontend-build.result }}" != "success" ] || \
             [ "${{ needs.backend-test.result }}" != "success" ]; then
            echo "❌ CI/CD pipeline failed!"
            exit 1
          fi
          echo "✅ CI/CD pipeline passed successfully!"
